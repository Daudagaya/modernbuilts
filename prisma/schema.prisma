generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  name                String? 
  email               String? @unique
  password            String?
  phone               String?
  emailVerified       DateTime? @map("email_verified")
  image               String?
  role                UserRole @default(USER)
  accounts            Account[]
  isTwoFactorEnabled Boolean @default(false)
  TwoFactorConfirmation TwoFactorConfirmation?
  @@map("user")
}


model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("account")
}


enum UserRole {
  ADMIN
  USER
}

model VerificationToken {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String @unique
  expires   DateTime
  @@unique([email, token])
}


model Project {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    length      String
    description String
    duration    DateTime
    valuation   String
    state       String
    city        String
    location    String
    sharePrice  Int
    investment  Investment[]
    roi         Int
    @@map("project")
}


model Investment {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  amount          Int
  investmentDate  DateTime
  payday          DateTime
  project         Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String @db.ObjectId
}


model PasswordResetToken {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String @unique
  expires   DateTime

  @@unique([email, token])
}

model twoFactorToken {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}